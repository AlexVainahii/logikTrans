{"version":3,"file":"static/js/425.31de8199.chunk.js","mappings":"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","sources":["components/OrderForm.styled.js","fakeApi.js","components/OrderForm.jsx","pages/Order.jsx","../node_modules/@mui/icons-material/LocalShipping.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { IconButton } from \"@mui/material\";\n\nexport const Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 16px;\n`;\n\nexport const Title = styled.h2`\n  margin-top: 0;\n  padding-top: 20px;\n  text-align: center;\n`;\n\nexport const Back = styled.span`\n  margin-left: 8px;\n`;\n\nexport const Form = styled.form`\n  width: 100%;\n  margin: 0 auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-sizing: border-box;\n\n  @media (min-width: 768px) {\n    width: 750px;\n  }\n`;\n\nexport const FormRow = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 10px;\n\n  @media (min-width: 768px) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Label = styled.label`\n  flex: 1 1 100%;\n\n  @media (min-width: 768px) {\n    flex: 0 0 50%;\n    text-align: left;\n    padding-right: 20px;\n  }\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 5px;\n  border-radius: 3px;\n  border: 1px solid #ccc;\n  background-color: #f5f5f5;\n\n  @media (min-width: 768px) {\n    width: auto;\n  }\n`;\n\nexport const SuggestionsList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n\n  li {\n    cursor: pointer;\n  }\n`;\n\nexport const Button = styled.button`\n  width: 100%;\n  padding: 10px;\n  border-radius: 3px;\n  border: none;\n  background-color: #007bff;\n  color: #fff;\n  cursor: pointer;\n\n  @media (min-width: 768px) {\n    width: auto;\n  }\n`;\n\nexport const LinkButton = styled.button`\n  display: flex;\n  padding: 10px;\n  border-radius: 3px;\n  border: none;\n  background-color: #007bff;\n  color: #fff;\n  cursor: pointer;\n  width: 70%;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n`;\n\nexport const IconButtons = styled(IconButton)`\n  margin-right: 8px;\n`;\n\nexport const ActionsWrapper = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n\n  @media (min-width: 768px) {\n    margin-bottom: 40px;\n  }\n`;\n\nexport const NewOrderButton = styled.button`\n  padding: 10px;\n  border-radius: 3px;\n  border: none;\n  background-color: #007bff;\n  color: #fff;\n  cursor: pointer;\n`;\nexport const ButtonsContainer = styled.div`\n  justify-content: space-between;\n  margin-bottom: 20px;\n`;\n\nexport const SubmitButton = styled.button`\n  display: flex;\n  padding: 10px;\n  border-radius: 3px;\n  border: none;\n  background-color: #007bff;\n  color: #fff;\n  cursor: pointer;\n  width: 70%;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n`;\nexport const TextButton = styled.div`\n  margin-right: 20px;\n`;\n","import axios from 'axios';\nexport const addDataToMockAPI = async (data, endpoint) => {\n  try {\n    const response = await axios.post(\n      `https://646bb7ca7d3c1cae4ce43282.mockapi.io/api/logic/${endpoint}`,\n      data\n    );\n    console.log('Дані успішно додані до MockAPI:', response.data);\n    return true;\n    // Тут ви можете додатково обробити відповідь сервера або виконати інші дії\n  } catch (error) {\n    console.error('Помилка при додаванні даних до MockAPI:', error);\n  }\n};\nexport async function fetchDataFromMockAPI(endpoint) {\n  try {\n    const response = await axios.get(\n      `https://646bb7ca7d3c1cae4ce43282.mockapi.io/api/logic/${endpoint}`\n    );\n    // Отримано дані з бекенду MockAPI\n    const data = response.data;\n    // Обробка отриманих даних\n\n    return data;\n  } catch (error) {\n    // Обробка помилки\n    console.error(error);\n    throw error;\n  }\n}\nexport async function fetchDataByIdFromMockAPI(endpoint, id) {\n  try {\n    const response = await axios.get(\n      `https://646bb7ca7d3c1cae4ce43282.mockapi.io/api/logic/${endpoint}?idd=${id}`\n    );\n    // Отримано дані з бекенду MockAPI за заданим id\n    const data = response.data;\n    // Обробка отриманих даних\n\n    return data;\n  } catch (error) {\n    // Обробка помилки\n    console.error(error);\n    throw error;\n  }\n}\n\n// Використання функції для отримання даних за id\n// Замініть 1 на власний id\n\nexport const getInternational = (origin, destination) => {\n  return origin !== destination;\n};\n\nexport const getcentrMap = shipment => {\n  const centerLat =\n    (shipment.originRoute.lat + shipment.destinationRoute.lat) / 2;\n  const centerLng =\n    (shipment.originRoute.lng + shipment.destinationRoute.lng) / 2;\n  return [centerLng, centerLat];\n};\n\nexport function getDistance(originRoute, destinationRoute) {\n  const earthRadius = 6371; // Радіус Землі в кілометрах\n\n  const dLat = toRadians(destinationRoute.lat - originRoute.lat);\n  const dLon = toRadians(destinationRoute.lng - originRoute.lng);\n\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRadians(originRoute.lat)) *\n      Math.cos(toRadians(destinationRoute.lat)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = earthRadius * c;\n\n  return Math.round(distance);\n}\n\nfunction toRadians(degrees) {\n  return degrees * (Math.PI / 180);\n}\nexport function getZoom(distance) {\n  if (distance > 1800) {\n    return 1;\n  }\n  if (distance > 1400) {\n    return 2;\n  }\n  if (distance > 1000) {\n    return 3;\n  }\n\n  if (distance > 500) {\n    return 4;\n  }\n  return 5;\n}\nexport function getdestinationDate(distance, originDate) {\n  const currentDate = new Date(originDate);\n\n  if (distance > 2500) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 8);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 1800) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 6);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 1400) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 4);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 1000) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 3);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 500) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 2);\n    return formatDate(deliveryDate);\n  }\n\n  const deliveryDate = new Date(currentDate);\n  deliveryDate.setDate(currentDate.getDate() + 1);\n  return formatDate(deliveryDate);\n}\n\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\nexport function calculateShippingCost(\n  distance,\n  weight,\n  pricePerKilometer,\n  transportType\n) {\n  let baseCost = distance * pricePerKilometer;\n\n  if (transportType) {\n    baseCost *= 1.5;\n  } else {\n    baseCost *= 1;\n  }\n\n  if (weight > 1000) {\n    const overweightCharge = (weight - 1000) * 0.5;\n    baseCost += overweightCharge;\n  }\n\n  return Math.round(baseCost);\n}\n\n// Замініть на ваш пароль\n","import React, { lazy, useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  addDataToMockAPI,\n  calculateShippingCost,\n  getDistance,\n  getInternational,\n  getdestinationDate,\n} from \"../fakeApi\";\nimport { useEffect } from \"react\";\nimport { Container } from \"./SharedLayout.styled\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Title } from \"./OrderForm.styled\";\nimport { toast } from \"react-toastify\";\nimport { nanoid } from \"nanoid\";\nimport {\n  ButtonsContainer,\n  Form,\n  FormRow,\n  TextButton,\n  Input,\n  Label,\n  LinkButton,\n  SubmitButton,\n  SuggestionsList,\n} from \"./OrderForm.styled\";\nimport LocalShippingIcon from \"@mui/icons-material/LocalShipping\";\nconst ShipmentBlock = lazy(() => import(\"./ShipmentBlock\"));\nconst MapWithRoute = lazy(() => import(\"./MapWithRoute\"));\nconst OrderForm = () => {\n  const navigate = useNavigate();\n  const currentDate = new Date().toISOString().split(\"T\")[0];\n  const [originCity, setOriginCity] = useState(\"\");\n  const [destinationCity, setDestinationCity] = useState(\"\");\n  const [originCountry, setOriginCountry] = useState(\"\");\n  const [destinationCountry, setDestinationCountry] = useState(\"\");\n  const [weight, setWeight] = useState(50);\n  const [originDate, setOriginDate] = useState(currentDate);\n  const [destinationDate, setDestinationDate] = useState(currentDate);\n  const [originRoute, setOriginRoute] = useState(null);\n  const [destinationRoute, setdDestinationRoute] = useState(null);\n  const [suggestedOrigins, setSuggestedOrigins] = useState([]);\n  const [suggestedDestinations, setSuggestedDestinations] = useState([]);\n  const [cost, setCost] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [createElement, setCreateElement] = useState(null);\n  const [shipment, setShipment] = useState(null);\n  const [client, setClient] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [originFlag, setOriginFlag] = useState(false);\n  const [destinationFlag, setoDestinationFlag] = useState(false);\n  const [originCityError, setOriginCityError] = useState(\"\");\n  const [destinationCityError, setDestinationCityError] = useState(\"\");\n  const [clientError, setClientError] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [save, setSave] = useState(false);\n  const isValidEmail = (email) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n  const validateForm = () => {\n    let isValid = true;\n\n    // Validate origin city\n    if (originCity.trim() === \"\" || originCityError) {\n      setOriginCityError(\n        \"Необхідно вказати та вибрати правильний початковий пункт\"\n      );\n      isValid = false;\n    } else {\n      setOriginCityError(\"\");\n    }\n\n    // Validate destination city\n    if (destinationCity.trim() === \"\" || destinationCityError) {\n      setDestinationCityError(\n        \"Необхідно вказати та вибрати правильний  кінцевий пункт\"\n      );\n      isValid = false;\n    } else {\n      setDestinationCityError(\"\");\n    }\n\n    // Validate client\n    if (client.trim() === \"\") {\n      setClientError(\"Необхідно вказати ім’я клієнта\");\n      isValid = false;\n    } else {\n      setClientError(\"\");\n    }\n    // Validate email\n    if (email.trim() === \"\" || emailError) {\n      setEmailError(\"Необхідно вказати вашу електронну пошту\");\n      isValid = false;\n    } else {\n      setEmailError(\"\");\n    }\n\n    return isValid;\n  };\n\n  const handleOriginCityChange = async (event) => {\n    const value = event.target.value;\n    setOriginCity(value);\n\n    try {\n      const response = await axios.get(\n        `https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(\n          value\n        )}&key=4b6e7d31f0654074aa698fd64a45063c`\n      );\n      const suggestions = response.data.results;\n      !suggestions[0]\n        ? setOriginCityError(\"Не можливо знайти місто\")\n        : setOriginCityError(\"\");\n      setSuggestedOrigins(suggestions);\n      setOriginFlag(false);\n    } catch (error) {\n      console.log(\"Помилка запиту геокодування:\", error.message);\n      setSuggestedOrigins([]);\n      setOriginCityError(\n        \"Необхідно вказати та вибрати правильний початковий пункт\"\n      );\n    }\n  };\n\n  const handleDestinationCityChange = async (event) => {\n    const value = event.currentTarget.value;\n    setDestinationCity(value);\n\n    try {\n      const response = await axios.get(\n        `https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(\n          value\n        )}&key=4b6e7d31f0654074aa698fd64a45063c`\n      );\n      const suggestions = response.data.results;\n      !suggestions[0]\n        ? setDestinationCityError(\"Не можливо знайти місто\")\n        : setDestinationCityError(\"\");\n      setSuggestedDestinations(suggestions);\n      setoDestinationFlag(false);\n    } catch (error) {\n      console.log(\"Помилка запиту геокодування:\", error.message);\n      setSuggestedDestinations([]);\n      setDestinationCityError(\n        \"Необхідно вказати та вибрати правильний кінцевий пункт\"\n      );\n    }\n  };\n\n  const handleSuggestionOriginSelected = (suggestion) => {\n    if (suggestion.components) {\n      const { city, country } = suggestion.components;\n      setOriginCity(city);\n      setOriginCountry(country);\n      setOriginRoute(suggestion.geometry);\n      setOriginFlag(true);\n    }\n    setSuggestedOrigins([]);\n  };\n  const handleSuggestionDestinationSelected = (suggestion) => {\n    if (suggestion.components) {\n      const { city, country } = suggestion.components;\n\n      setDestinationCity(city);\n      setDestinationCountry(country);\n      setoDestinationFlag(true);\n      setdDestinationRoute(suggestion.geometry);\n    }\n    setSuggestedDestinations([]);\n  };\n\n  const handleOriginDateChange = (event) => {\n    const value = event.target.value;\n    setOriginDate(value);\n  };\n  const handleClientChange = (event) => {\n    const value = event.target.value;\n    setClient(value);\n    setClientError(\"\");\n  };\n  const handleWeightChange = (event) => {\n    const value = event.target.value;\n    setWeight(value);\n  };\n  const handleEmailChange = (e) => {\n    if (isValidEmail(e.target.value) || !e.target.value) {\n      setEmailError(\"\");\n    } else {\n      setEmailError(\"Неправильний формат електронної пошти\");\n    }\n    setEmail(e.target.value);\n  };\n\n  useEffect(() => {\n    //Отримуємо відстань у кілометрах\n    if (originFlag && destinationFlag && weight !== 0) {\n      const newDistance = getDistance(originRoute, destinationRoute);\n      const newDestinationDate = getdestinationDate(newDistance, originDate);\n\n      const shippingCost = calculateShippingCost(\n        newDistance,\n        weight,\n        10,\n        getInternational(originCity, destinationCity)\n      );\n\n      setDistance(newDistance);\n      setCost(shippingCost);\n      setDestinationDate(newDestinationDate);\n    }\n  }, [\n    originDate,\n    originCity,\n    destinationCity,\n    originRoute,\n    destinationRoute,\n    originFlag,\n    destinationFlag,\n    weight,\n  ]);\n  useEffect(() => {\n    if (shipment && save) {\n      navigate(`/payment/${shipment.idd}`);\n      setSave(false);\n      setShipment(null);\n      setCreateElement(false);\n      toast.success(\"Перехід до оплати замовлення!\", {\n        position: toast.POSITION.TOP_RIGHT, // Встановлення позиції Toast\n        autoClose: 3000, // Автоматичне закриття через 3 секунди\n        hideProgressBar: true, // Відображення прогрес-бару\n        closeOnClick: true, // Закриття Toast при кліку\n        pauseOnHover: true, // Пауза при наведенні курсору\n        draggable: true, // Можливість перетягування Toast\n      });\n    }\n  }, [shipment, navigate, save]);\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    if (validateForm()) {\n      // Створення нового об'єкта з введеними даними\n      const newOrder = {\n        idd: nanoid(),\n        shipmentNum: originCity[0] + destinationCity[0] + distance + client[0],\n        originCity: originCity.toString(),\n        originCountry: originCountry.toString(),\n\n        destinationCity: destinationCity.toString(),\n        destinationCountry: destinationCountry.toString(),\n        weight: Number(weight),\n        statusShip: \"Оформлення\",\n        originDate: new Date(originDate).toISOString(),\n        destinationDate: new Date(destinationDate).toISOString(),\n        originRoute: originRoute,\n        destinationRoute: destinationRoute,\n        isInternational: getInternational(originCountry, destinationCountry),\n        distance: distance,\n        cost: cost,\n        client: client,\n        email: email,\n      };\n      setShipment(newOrder);\n      setCreateElement(true);\n    } else {\n      toast.error(\"Не всі поля заповнено!\", {\n        position: toast.POSITION.TOP_RIGHT, // Встановлення позиції Toast\n        autoClose: 3000, // Автоматичне закриття через 3 секунди\n        hideProgressBar: true, // Відображення прогрес-бару\n        closeOnClick: true, // Закриття Toast при кліку\n        pauseOnHover: true, // Пауза при наведенні курсору\n        draggable: true, // Можливість перетягування Toast\n      });\n    } // Показати Toast повідомлення\n  };\n  const handleDeleteShipment = () => {\n    setCreateElement(false);\n    setShipment(null);\n    setSave(false);\n    setOriginCity(\"\");\n    setDestinationCity(\"\");\n    setOriginCountry(\"\");\n    setDestinationCountry(\"\");\n    setWeight(50);\n    setOriginDate(currentDate);\n    setDestinationDate(currentDate);\n    setOriginRoute([]);\n    setdDestinationRoute([]);\n    setEmail(\"\");\n    setCost(0);\n    setClient(\"\");\n    setDistance(0);\n    setOriginFlag(false);\n    setoDestinationFlag(false);\n  };\n  const handleChangeShipment = () => {\n    setCreateElement(false);\n  };\n  const handleDesignShipment = () => {\n    const fetchAdd = addDataToMockAPI(shipment, \"shipment\");\n\n    setOriginCity(\"\");\n    setDestinationCity(\"\");\n    setOriginCountry(\"\");\n    setDestinationCountry(\"\");\n    setWeight(50);\n    setOriginDate(currentDate);\n    setDestinationDate(currentDate);\n    setOriginRoute([]);\n    setdDestinationRoute([]);\n    setEmail(\"\");\n    setCost(\"\");\n    setClient(\"\");\n    setDistance(0);\n    setOriginFlag(false);\n    setoDestinationFlag(false);\n\n    setSave(fetchAdd);\n  };\n  const ErrorMessage = ({ message }) => {\n    return <p style={{ color: \"red\" }}>{message}</p>;\n  };\n  return (\n    <Container>\n      {!createElement ? (\n        <Title>Замовлення перевезення</Title>\n      ) : (\n        <Title>Оформлення замовлення</Title>\n      )}\n\n      <div style={{ display: \"flex\" }}>\n        {!createElement && (\n          <Form onSubmit={handleFormSubmit}>\n            <FormRow>\n              <Label htmlFor=\"originCity\">Початковий пункт:</Label>\n              <Input\n                type=\"text\"\n                id=\"originCity\"\n                value={originCity}\n                onInput={handleOriginCityChange}\n              />\n              <SuggestionsList>\n                {suggestedOrigins\n                  .filter(\n                    (suggestion) => suggestion.components.city !== undefined\n                  )\n                  .map((suggestion) => (\n                    <li\n                      key={suggestion.geometry.lat + suggestion.geometry.lng}\n                      onClick={() => handleSuggestionOriginSelected(suggestion)}\n                    >\n                      {suggestion.formatted}\n                    </li>\n                  ))}\n              </SuggestionsList>\n            </FormRow>\n            {originCityError && <ErrorMessage message={originCityError} />}\n            <FormRow>\n              <Label htmlFor=\"originCountry\">Країна походження:</Label>\n              <Input\n                type=\"text\"\n                id=\"originCountry\"\n                value={originCountry}\n                disabled\n              />\n            </FormRow>\n\n            <FormRow>\n              <Label htmlFor=\"destinationCity\">Кінцевий пункт:</Label>\n              <Input\n                type=\"text\"\n                id=\"destinationCity\"\n                value={destinationCity}\n                onInput={handleDestinationCityChange}\n              />\n\n              <SuggestionsList>\n                {suggestedDestinations\n                  .filter(\n                    (suggestion) => suggestion.components.city !== undefined\n                  )\n                  .map((suggestion) => (\n                    <li\n                      key={suggestion.geometry.lat + suggestion.geometry.lng}\n                      onClick={() =>\n                        handleSuggestionDestinationSelected(suggestion)\n                      }\n                    >\n                      {suggestion.formatted}\n                    </li>\n                  ))}\n              </SuggestionsList>\n            </FormRow>\n            {destinationCityError && (\n              <ErrorMessage message={destinationCityError} />\n            )}\n            <FormRow>\n              <Label htmlFor=\"destinationCountry\">Країна призначення:</Label>\n              <Input\n                type=\"text\"\n                id=\"destinationCountry\"\n                value={destinationCountry}\n                disabled\n              />\n            </FormRow>\n\n            <FormRow>\n              <Label htmlFor=\"originDate\">Дата погрузки:</Label>\n              <Input\n                type=\"date\"\n                id=\"originDate\"\n                value={originDate}\n                onInput={handleOriginDateChange}\n                min={currentDate}\n              />\n            </FormRow>\n\n            <FormRow>\n              <Label htmlFor=\"client\">Замовник:</Label>\n              <Input\n                type=\"string\"\n                id=\"client\"\n                value={client}\n                onInput={handleClientChange}\n              />\n            </FormRow>\n            {clientError && <ErrorMessage message={clientError} />}\n            <FormRow>\n              <Label htmlFor=\"email\">Електронна пошта:</Label>\n              <Input\n                type=\"email\"\n                id=\"email\"\n                value={email}\n                onInput={handleEmailChange}\n              />\n            </FormRow>\n            {emailError && <ErrorMessage message={emailError} />}\n\n            <FormRow>\n              <Label htmlFor=\"weight\">Вага, кг:</Label>\n              <Input\n                type=\"number\"\n                id=\"weight\"\n                value={weight}\n                onInput={handleWeightChange}\n                min={50}\n              />\n            </FormRow>\n\n            <FormRow>\n              <Label htmlFor=\"distance\">Відстань:</Label>\n              <Input type=\"text\" id=\"distance\" value={distance} disabled />\n            </FormRow>\n\n            <FormRow>\n              <Label htmlFor=\"cost\">Вартість доставки:</Label>\n              <Input type=\"text\" id=\"cost\" value={cost} disabled />\n            </FormRow>\n\n            <SubmitButton type=\"submit\">\n              <TextButton>Замовити перевезення</TextButton>\n              <LocalShippingIcon />\n            </SubmitButton>\n          </Form>\n        )}\n\n        {createElement && (\n          <div>\n            <ButtonsContainer>\n              <LinkButton onClick={handleDesignShipment}>\n                Оформити замовлення\n              </LinkButton>\n            </ButtonsContainer>\n            <ShipmentBlock\n              shipment={shipment}\n              handleChangeShipment={handleChangeShipment}\n              handleDeleteShipment={handleDeleteShipment}\n            />\n            <MapWithRoute shipment={shipment} />\n          </div>\n        )}\n      </div>\n    </Container>\n  );\n};\n\nexport default OrderForm;\n","import OrderForm from \"../components/OrderForm\";\n\nconst Order = () => {\n  return (\n    <>\n      <main>\n        <OrderForm />\n      </main>\n    </>\n  );\n};\nexport default Order;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 8h-3V4H3c-1.1 0-2 .9-2 2v11h2c0 1.66 1.34 3 3 3s3-1.34 3-3h6c0 1.66 1.34 3 3 3s3-1.34 3-3h2v-5l-3-4zM6 18.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm13.5-9 1.96 2.5H17V9.5h2.5zm-1.5 9c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"\n}), 'LocalShipping');\nexports.default = _default;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Title","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","Form","_templateObject3","_templateObject4","FormRow","_templateObject5","Label","_templateObject6","Input","_templateObject7","SuggestionsList","_templateObject8","LinkButton","_templateObject9","_templateObject10","ButtonsContainer","IconButton","_templateObject11","_templateObject12","_templateObject13","_templateObject14","SubmitButton","_templateObject15","TextButton","_templateObject16","addDataToMockAPI","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","endpoint","response","wrap","_context","prev","next","axios","concat","sent","console","log","abrupt","t0","error","stop","_x","_x2","apply","arguments","fetchDataFromMockAPI","_x3","_fetchDataFromMockAPI","_callee2","_context2","fetchDataByIdFromMockAPI","_x4","_x5","_fetchDataByIdFromMockAPI","_callee3","id","_context3","getInternational","origin","destination","getcentrMap","shipment","centerLat","originRoute","lat","destinationRoute","lng","getDistance","dLat","toRadians","dLon","a","Math","sin","cos","distance","atan2","sqrt","round","degrees","PI","getZoom","getdestinationDate","originDate","currentDate","Date","deliveryDate","setDate","getDate","formatDate","date","year","getFullYear","month","getMonth","toString","padStart","day","calculateShippingCost","weight","pricePerKilometer","transportType","baseCost","ShipmentBlock","lazy","MapWithRoute","navigate","useNavigate","toISOString","split","_useState","useState","_useState2","_slicedToArray","originCity","setOriginCity","_useState3","_useState4","destinationCity","setDestinationCity","_useState5","_useState6","originCountry","setOriginCountry","_useState7","_useState8","destinationCountry","setDestinationCountry","_useState9","_useState10","setWeight","_useState11","_useState12","setOriginDate","_useState13","_useState14","destinationDate","setDestinationDate","_useState15","_useState16","setOriginRoute","_useState17","_useState18","setdDestinationRoute","_useState19","_useState20","suggestedOrigins","setSuggestedOrigins","_useState21","_useState22","suggestedDestinations","setSuggestedDestinations","_useState23","_useState24","cost","setCost","_useState25","_useState26","setDistance","_useState27","_useState28","createElement","setCreateElement","_useState29","_useState30","setShipment","_useState31","_useState32","client","setClient","_useState33","_useState34","email","setEmail","_useState35","_useState36","originFlag","setOriginFlag","_useState37","_useState38","destinationFlag","setoDestinationFlag","_useState39","_useState40","originCityError","setOriginCityError","_useState41","_useState42","destinationCityError","setDestinationCityError","_useState43","_useState44","clientError","setClientError","_useState45","_useState46","emailError","setEmailError","_useState47","_useState48","save","setSave","handleOriginCityChange","event","value","suggestions","target","encodeURIComponent","results","message","handleDestinationCityChange","_ref2","currentTarget","useEffect","newDistance","newDestinationDate","shippingCost","idd","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","ErrorMessage","_ref3","_jsx","style","color","children","_jsxs","Container","display","onSubmit","preventDefault","isValid","trim","validateForm","newOrder","nanoid","shipmentNum","Number","statusShip","isInternational","htmlFor","type","onInput","filter","suggestion","undefined","components","city","map","onClick","_suggestion$component","country","geometry","handleSuggestionOriginSelected","formatted","disabled","_suggestion$component2","handleSuggestionDestinationSelected","min","e","test","isValidEmail","LocalShippingIcon","fetchAdd","handleChangeShipment","handleDeleteShipment","_Fragment","OrderForm","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","size","length","crypto","getRandomValues","Uint8Array","reduce","byte","toUpperCase"],"sourceRoot":""}