{"version":3,"file":"static/js/447.1398719d.chunk.js","mappings":"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","sources":["components/Reviews.styled.js","components/Reviews.jsx","fakeApi.js","../node_modules/@mui/icons-material/Reviews.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ReviewContainer = styled.div`\n  margin-bottom: 20px;\n`;\n\nexport const ReviewAuthor = styled.h4`\n  margin-bottom: 5px;\n`;\n\nexport const ReviewContent = styled.p`\n  font-style: italic;\n`;\n\nexport const ReviewForm = styled.form`\n  margin-top: 20px;\n`;\n\nexport const ReviewInput = styled.input`\n  width: 100%;\n  padding: 5px;\n  border-radius: 3px;\n  border: 1px solid #ccc;\n  background-color: #f5f5f5;\n  margin-bottom: 10px;\n`;\n\nexport const ReviewSubmitButton = styled.button`\n  display: flex;\n  align-items: center;\n  padding: 8px 12px;\n  border-radius: 3px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n`;\n","import { useEffect, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport {\n  ReviewAuthor,\n  ReviewContainer,\n  ReviewContent,\n  ReviewForm,\n  ReviewInput,\n  ReviewSubmitButton,\n} from \"./Reviews.styled\";\nimport { addDataToMockAPI, fetchDataFromMockAPI } from \"../fakeApi\";\nimport ReviewsIcon from \"@mui/icons-material/Reviews\";\nimport { Loader } from \"./Loader\";\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n\n  const [newReviewAuthor, setNewReviewAuthor] = useState(\"\");\n  const [newReviewContent, setNewReviewContent] = useState(\"\");\n  const [isloading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const fetchedReviews = await fetchDataFromMockAPI(\"reviews\");\n        setReviews(fetchedReviews);\n      } catch (error) {\n        console.error(\"Помилка при отриманні перевезень:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n  const handleReviewAuthorChange = (event) => {\n    setNewReviewAuthor(event.target.value);\n  };\n\n  const handleReviewContentChange = (event) => {\n    setNewReviewContent(event.target.value);\n  };\n\n  const handleReviewSubmit = (event) => {\n    event.preventDefault();\n    if (newReviewAuthor.trim() !== \"\" && newReviewContent.trim() !== \"\") {\n      const newReview = {\n        id: nanoid(),\n        author: newReviewAuthor,\n        content: newReviewContent,\n      };\n      addDataToMockAPI(newReview, \"reviews\");\n      setReviews([...reviews, newReview]);\n      setNewReviewAuthor(\"\");\n      setNewReviewContent(\"\");\n    }\n  };\n\n  return (\n    <section>\n      <div>\n        <h2>Відгуки</h2>\n        {isloading && <Loader />}\n        {reviews.map((review) => (\n          <ReviewContainer key={review.id}>\n            <ReviewAuthor>{review.author}</ReviewAuthor>\n            <ReviewContent>{review.content}</ReviewContent>\n          </ReviewContainer>\n        ))}\n        <ReviewForm onSubmit={handleReviewSubmit}>\n          <ReviewInput\n            type=\"text\"\n            placeholder=\"Ваше ім'я\"\n            value={newReviewAuthor}\n            onChange={handleReviewAuthorChange}\n            required\n          />\n          <ReviewInput\n            type=\"text\"\n            placeholder=\"Ваш відгук\"\n            value={newReviewContent}\n            onChange={handleReviewContentChange}\n            required\n          />\n          <ReviewSubmitButton type=\"submit\">\n            Надіслати відгук <ReviewsIcon style={{ marginLeft: \"20px\" }} />\n          </ReviewSubmitButton>\n        </ReviewForm>\n      </div>\n    </section>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\nexport const addDataToMockAPI = async (data, endpoint) => {\n  try {\n    const response = await axios.post(\n      `https://646bb7ca7d3c1cae4ce43282.mockapi.io/api/logic/${endpoint}`,\n      data\n    );\n    console.log('Дані успішно додані до MockAPI:', response.data);\n    return true;\n    // Тут ви можете додатково обробити відповідь сервера або виконати інші дії\n  } catch (error) {\n    console.error('Помилка при додаванні даних до MockAPI:', error);\n  }\n};\nexport async function fetchDataFromMockAPI(endpoint) {\n  try {\n    const response = await axios.get(\n      `https://646bb7ca7d3c1cae4ce43282.mockapi.io/api/logic/${endpoint}`\n    );\n    // Отримано дані з бекенду MockAPI\n    const data = response.data;\n    // Обробка отриманих даних\n\n    return data;\n  } catch (error) {\n    // Обробка помилки\n    console.error(error);\n    throw error;\n  }\n}\nexport async function fetchDataByIdFromMockAPI(endpoint, id) {\n  try {\n    const response = await axios.get(\n      `https://646bb7ca7d3c1cae4ce43282.mockapi.io/api/logic/${endpoint}?idd=${id}`\n    );\n    // Отримано дані з бекенду MockAPI за заданим id\n    const data = response.data;\n    // Обробка отриманих даних\n\n    return data;\n  } catch (error) {\n    // Обробка помилки\n    console.error(error);\n    throw error;\n  }\n}\n\n// Використання функції для отримання даних за id\n// Замініть 1 на власний id\n\nexport const getInternational = (origin, destination) => {\n  return origin !== destination;\n};\n\nexport const getcentrMap = shipment => {\n  const centerLat =\n    (shipment.originRoute.lat + shipment.destinationRoute.lat) / 2;\n  const centerLng =\n    (shipment.originRoute.lng + shipment.destinationRoute.lng) / 2;\n  return [centerLng, centerLat];\n};\n\nexport function getDistance(originRoute, destinationRoute) {\n  const earthRadius = 6371; // Радіус Землі в кілометрах\n\n  const dLat = toRadians(destinationRoute.lat - originRoute.lat);\n  const dLon = toRadians(destinationRoute.lng - originRoute.lng);\n\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRadians(originRoute.lat)) *\n      Math.cos(toRadians(destinationRoute.lat)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = earthRadius * c;\n\n  return Math.round(distance);\n}\n\nfunction toRadians(degrees) {\n  return degrees * (Math.PI / 180);\n}\nexport function getZoom(distance) {\n  if (distance > 1800) {\n    return 1;\n  }\n  if (distance > 1400) {\n    return 2;\n  }\n  if (distance > 1000) {\n    return 3;\n  }\n\n  if (distance > 500) {\n    return 4;\n  }\n  return 5;\n}\nexport function getdestinationDate(distance, originDate) {\n  const currentDate = new Date(originDate);\n\n  if (distance > 2500) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 8);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 1800) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 6);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 1400) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 4);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 1000) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 3);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 500) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 2);\n    return formatDate(deliveryDate);\n  }\n\n  const deliveryDate = new Date(currentDate);\n  deliveryDate.setDate(currentDate.getDate() + 1);\n  return formatDate(deliveryDate);\n}\n\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\nexport function calculateShippingCost(\n  distance,\n  weight,\n  pricePerKilometer,\n  transportType\n) {\n  let baseCost = distance * pricePerKilometer;\n\n  if (transportType) {\n    baseCost *= 1.5;\n  } else {\n    baseCost *= 1;\n  }\n\n  if (weight > 1000) {\n    const overweightCharge = (weight - 1000) * 0.5;\n    baseCost += overweightCharge;\n  }\n\n  return Math.round(baseCost);\n}\n\n// Замініть на ваш пароль\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-6.43 9.57L12 15l-1.57-3.43L7 10l3.43-1.57L12 5l1.57 3.43L17 10l-3.43 1.57z\"\n}), 'Reviews');\nexports.default = _default;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ReviewContainer","styled","_templateObject","_taggedTemplateLiteral","ReviewAuthor","_templateObject2","ReviewContent","_templateObject3","ReviewForm","_templateObject4","ReviewInput","_templateObject5","ReviewSubmitButton","_templateObject6","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","_useState3","_useState4","newReviewAuthor","setNewReviewAuthor","_useState5","_useState6","newReviewContent","setNewReviewContent","_useState7","_useState8","isloading","setIsLoading","useEffect","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fetchedReviews","wrap","_context","prev","next","fetchDataFromMockAPI","sent","t0","console","error","finish","stop","apply","arguments","_jsx","children","_jsxs","Loader","map","review","author","content","id","onSubmit","event","preventDefault","trim","newReview","nanoid","addDataToMockAPI","concat","_toConsumableArray","type","placeholder","value","onChange","target","required","ReviewsIcon","style","marginLeft","data","endpoint","response","axios","log","abrupt","_x","_x2","_x3","_fetchDataFromMockAPI","_callee2","_context2","fetchDataByIdFromMockAPI","_x4","_x5","_fetchDataByIdFromMockAPI","_callee3","_context3","getInternational","origin","destination","getcentrMap","shipment","centerLat","originRoute","lat","destinationRoute","lng","getDistance","dLat","toRadians","dLon","a","Math","sin","cos","distance","atan2","sqrt","round","degrees","PI","getZoom","getdestinationDate","originDate","currentDate","Date","deliveryDate","setDate","getDate","formatDate","date","year","getFullYear","month","getMonth","toString","padStart","day","calculateShippingCost","weight","pricePerKilometer","transportType","baseCost","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","size","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toUpperCase"],"sourceRoot":""}